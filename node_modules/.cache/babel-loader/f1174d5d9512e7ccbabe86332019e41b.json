{"ast":null,"code":"var _jsxFileName = \"/home/mani/projetos/hybrid-fib/src/contexts/AppContext.tsx\";\nimport React, { useReducer, useEffect } from 'react';\nimport { Plugins } from '@capacitor/core';\nconst {\n  Storage\n} = Plugins;\nconst DEFAULT_APPDATA = {\n  names: []\n}; // evento de reducer e actions \n\nexport const AppContext = React.createContext([DEFAULT_APPDATA, () => {}]);\nexport const AppContextProvider = ({\n  children\n}) => {\n  const reducer = useReducer((state, {\n    action\n  }) => {\n    switch (action.type) {\n      case 'add':\n        {\n          const newState = { ...state,\n            names: [action.nameToInsert, ...state.names]\n          };\n          Storage.set({\n            key: 'appContext',\n            value: JSON.stringify(newState)\n          }).catch(() => {});\n          return newState;\n        }\n\n      case 'delete':\n        {\n          const newNames = [...state.names];\n          newNames.splice(action.indexToDelete, 1);\n          const newState = { ...state,\n            names: newNames\n          };\n          Storage.set({\n            key: 'appContext',\n            value: JSON.stringify(newState)\n          }).catch(() => {});\n          return newState;\n        }\n\n      case 'initialize':\n        return action.state;\n\n      case 'update':\n        {\n          const newNames = [...state.names];\n          newNames[action.at] = action.to;\n          const newState = { ...state,\n            names: newNames\n          };\n          Storage.set({\n            key: 'appContext',\n            value: JSON.stringify(state)\n          });\n          return newState;\n        }\n    }\n  }, DEFAULT_APPDATA);\n  useEffect(() => {\n    Storage.get({\n      key: 'appContext'\n    }).then(value => {\n      if (!value.value) {\n        return;\n      }\n\n      const state = JSON.parse(value.value);\n      reducer[1]({\n        action: {\n          type: 'initialize',\n          state: state\n        }\n      });\n    }).catch(() => {});\n  }, []);\n  return React.createElement(AppContext.Provider, {\n    value: reducer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/home/mani/projetos/hybrid-fib/src/contexts/AppContext.tsx"],"names":["React","useReducer","useEffect","Plugins","Storage","DEFAULT_APPDATA","names","AppContext","createContext","AppContextProvider","children","reducer","state","action","type","newState","nameToInsert","set","key","value","JSON","stringify","catch","newNames","splice","indexToDelete","at","to","get","then","parse"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAApB;AAMA,MAAME,eAAwB,GAAG;AAC7BC,EAAAA,KAAK,EAAE;AADsB,CAAjC,C,CAIA;;AAaA,OAAO,MAAMC,UAAU,GAAGP,KAAK,CAACQ,aAAN,CAExB,CAACH,eAAD,EAAkB,MAAM,CAAE,CAA1B,CAFwB,CAAnB;AAIP,OAAO,MAAMI,kBAAyD,GAAG,CAAC;AACtEC,EAAAA;AADsE,CAAD,KAEtC;AAC/B,QAAMC,OAAO,GAAGV,UAAU,CACtB,CAACW,KAAD,EAAiB;AAAEC,IAAAA;AAAF,GAAjB,KAAwD;AACpD,YAAQA,MAAM,CAACC,IAAf;AACI,WAAK,KAAL;AAAY;AACR,gBAAMC,QAAQ,GAAG,EACb,GAAGH,KADU;AAEbN,YAAAA,KAAK,EAAE,CACHO,MAAM,CAACG,YADJ,EAEH,GAAGJ,KAAK,CAACN,KAFN;AAFM,WAAjB;AAOAF,UAAAA,OAAO,CAACa,GAAR,CAAY;AACRC,YAAAA,GAAG,EAAE,YADG;AAERC,YAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf;AAFC,WAAZ,EAIKO,KAJL,CAIW,MAAM,CAAE,CAJnB;AAKA,iBAAOP,QAAP;AACH;;AACD,WAAK,QAAL;AAAe;AACX,gBAAMQ,QAAQ,GAAG,CAAC,GAAGX,KAAK,CAACN,KAAV,CAAjB;AACAiB,UAAAA,QAAQ,CAACC,MAAT,CACIX,MAAM,CAACY,aADX,EAC0B,CAD1B;AAGA,gBAAMV,QAAQ,GAAG,EACb,GAAGH,KADU;AAEbN,YAAAA,KAAK,EAAEiB;AAFM,WAAjB;AAIAnB,UAAAA,OAAO,CAACa,GAAR,CAAY;AACRC,YAAAA,GAAG,EAAE,YADG;AAERC,YAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf;AAFC,WAAZ,EAIKO,KAJL,CAIW,MAAM,CAAE,CAJnB;AAKA,iBAAOP,QAAP;AACH;;AACD,WAAK,YAAL;AACI,eAAOF,MAAM,CAACD,KAAd;;AAEJ,WAAK,QAAL;AAAe;AACX,gBAAMW,QAAQ,GAAG,CAAC,GAAGX,KAAK,CAACN,KAAV,CAAjB;AACAiB,UAAAA,QAAQ,CAACV,MAAM,CAACa,EAAR,CAAR,GAAsBb,MAAM,CAACc,EAA7B;AACA,gBAAMZ,QAAQ,GAAG,EACb,GAAGH,KADU;AACHN,YAAAA,KAAK,EAAEiB;AADJ,WAAjB;AAGAnB,UAAAA,OAAO,CAACa,GAAR,CAAY;AACRC,YAAAA,GAAG,EAAE,YADG;AAERC,YAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeT,KAAf;AAFC,WAAZ;AAIA,iBAAOG,QAAP;AACH;AA9CL;AAgDH,GAlDqB,EAmDtBV,eAnDsB,CAA1B;AAsDAH,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,OAAO,CAACwB,GAAR,CAAY;AAAEV,MAAAA,GAAG,EAAE;AAAP,KAAZ,EACKW,IADL,CACWV,KAAD,IAAW;AACb,UAAI,CAACA,KAAK,CAACA,KAAX,EAAkB;AAAE;AAAQ;;AAE5B,YAAMP,KAAc,GAAGQ,IAAI,CAACU,KAAL,CAAWX,KAAK,CAACA,KAAjB,CAAvB;AACAR,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAW;AACPE,QAAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAE,YAAR;AAAsBF,UAAAA,KAAK,EAAEA;AAA7B;AADD,OAAX;AAIH,KATL,EAUKU,KAVL,CAUW,MAAM,CAAE,CAVnB;AAWH,GAZQ,EAYN,EAZM,CAAT;AAcA,SACI,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAEX,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,QADL,CADJ;AAKH,CA5EM","sourcesContent":["import React, { useReducer, useEffect } from 'react'\nimport { Plugins } from '@capacitor/core'\nconst { Storage } = Plugins\n\nexport interface AppData {\n    names: string[]\n}\n\nconst DEFAULT_APPDATA: AppData = {\n    names: []\n}\n\n// evento de reducer e actions \nexport interface AppDataAction {\n    action: (\n        { type: 'add', nameToInsert: string}\n    ) | (\n        { type: 'delete', indexToDelete: number}\n    ) | (\n        { type: 'initialize', state: AppData }\n    ) | (\n        { type: 'udpate', at: number, to: string }\n    )\n}\n\nexport const AppContext = React.createContext<\n    [AppData, React.Dispatch<AppDataAction>]\n>([DEFAULT_APPDATA, () => {}])\n\nexport const AppContextProvider: React.FC<React.PropsWithChildren<{}>> = ({\n    children\n}: React.PropsWithChildren<{}>) => {\n    const reducer = useReducer(\n        (state: AppData, { action }: AppDataAction): AppData => {\n            switch (action.type) {\n                case 'add': {\n                    const newState = {\n                        ...state,\n                        names: [\n                            action.nameToInsert,\n                            ...state.names\n                        ]\n                    }\n                    Storage.set({\n                        key: 'appContext',\n                        value: JSON.stringify(newState)\n                    })\n                        .catch(() => {})\n                    return newState\n                }\n                case 'delete': {\n                    const newNames = [...state.names]\n                    newNames.splice(\n                        action.indexToDelete, 1\n                    )\n                    const newState = {\n                        ...state,\n                        names: newNames\n                    }\n                    Storage.set({\n                        key: 'appContext',\n                        value: JSON.stringify(newState)\n                    })\n                        .catch(() => {})\n                    return newState\n                }\n                case 'initialize':\n                    return action.state\n                \n                case 'update': {\n                    const newNames = [...state.names]\n                    newNames[action.at] = action.to\n                    const newState = {\n                        ...state, names: newNames\n                    }\n                    Storage.set({\n                        key: 'appContext',\n                        value: JSON.stringify(state)\n                    })\n                    return newState\n                }\n            }\n        },\n        DEFAULT_APPDATA\n    )\n\n    useEffect(() => {\n        Storage.get({ key: 'appContext'})\n            .then((value) => {\n                if (!value.value) { return }\n\n                const state: AppData = JSON.parse(value.value)\n                reducer[1]({\n                    action: { type: 'initialize', state: state }\n                })\n                \n            })\n            .catch(() => {})\n    }, [])\n\n    return (\n        <AppContext.Provider value={reducer}>\n            {children}\n        </AppContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}