{"ast":null,"code":"var _jsxFileName = \"/home/mani/projetos/hybrid-fib/src/components/ContextualNameSetter.tsx\";\nimport React, { useContext } from \"react\";\nimport NameSetter from \"./NameSetter\";\nimport { AppContext } from \"../contexts/AppContext\";\n\nconst ContextualNameSetter = props => {\n  const [, dispatchAppData] = useContext(AppContext);\n  return React.createElement(NameSetter, Object.assign({}, props, {\n    onNameSet: name => {\n      dispatchAppData({\n        action: {\n          type: \"add\",\n          nameToInsert: name\n        }\n      });\n\n      if (props.onNameSet) {\n        props.onNameSet(name);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }));\n};\n\nexport default ContextualNameSetter;","map":{"version":3,"sources":["/home/mani/projetos/hybrid-fib/src/components/ContextualNameSetter.tsx"],"names":["React","useContext","NameSetter","AppContext","ContextualNameSetter","props","dispatchAppData","name","action","type","nameToInsert","onNameSet"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,UAAP,MAA4C,cAA5C;AACA,SAASC,UAAT,QAA2B,wBAA3B;;AAEA,MAAMC,oBAA+C,GACnDC,KADsD,IAEnD;AACH,QAAM,GAAGC,eAAH,IAAsBL,UAAU,CAACE,UAAD,CAAtC;AACA,SACE,oBAAC,UAAD,oBACME,KADN;AAEE,IAAA,SAAS,EAAEE,IAAI,IAAI;AACjBD,MAAAA,eAAe,CAAC;AACdE,QAAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAE,KAAR;AAAeC,UAAAA,YAAY,EAAEH;AAA7B;AADM,OAAD,CAAf;;AAGA,UAAIF,KAAK,CAACM,SAAV,EAAqB;AACnBN,QAAAA,KAAK,CAACM,SAAN,CAAgBJ,IAAhB;AACD;AACF,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAaD,CAjBD;;AAmBA,eAAeH,oBAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport NameSetter, { NameSetterProps } from \"./NameSetter\";\nimport { AppContext } from \"../contexts/AppContext\";\n\nconst ContextualNameSetter: React.FC<NameSetterProps> = (\n  props: NameSetterProps\n) => {\n  const [, dispatchAppData] = useContext(AppContext);\n  return (\n    <NameSetter\n      {...props}\n      onNameSet={name => {\n        dispatchAppData({\n          action: { type: \"add\", nameToInsert: name }\n        });\n        if (props.onNameSet) {\n          props.onNameSet(name);\n        }\n      }}\n    />\n  );\n};\n\nexport default ContextualNameSetter;\n"]},"metadata":{},"sourceType":"module"}